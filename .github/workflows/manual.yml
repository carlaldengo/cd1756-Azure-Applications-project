# Workflow to ensure whenever a Github PR is submitted, 
# a JIRA ticket gets created automatically. 
name: Manual Workflow

# Controls when the action will run. 
on:
  # Triggers the workflow on pull request events but only for the master branch
  pull_request_target:
    types: [opened, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test-transition-issue:
    name: Convert Github Issue to Jira Issue
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        
    - name: Create NEW JIRA ticket
      id: create
      uses: atlassian/gajira-create@master
      with:
        project: CONUPDATE
        issuetype: Task
        summary: |
          Github PR nd081 - Azure Cloud Developer  | Repo: ${{ github.repository }}  | PR# ${{github.event.number}}
        description: |
           Repo link: https://github.com/${{ github.repository }}   
           PR no. ${{ github.event.pull_request.number }} 
           PR title: ${{ github.event.pull_request.title }}  
           PR description: ${{ github.event.pull_request.description }}  
           In addition, please resolve other issues, if any. 
        fields: '{"components": [{"name":"nd081 - Azure Cloud Developer"}], "customfield_16449":"https://classroom.udacity.com/", "customfield_16450":"Resolve the PR", "labels": ["github"], "priority":{"id": "4"}}'

    - name: Log created issue
      run: echo "Issue ${{ steps.create.outputs.issue }} was created"

  build-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Create and start virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
      
    - name: Install system dependencies
      run: sudo apt-get install unixodbc-dev

    - name: Install Python dependencies
      run: |
        source venv/bin/activate
        pip install -r requirements.txt

    # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

    - name: Zip artifact for deployment
      run: zip release.zip ./* -r

    - name: Upload artifact for deployment jobs
      uses: actions/upload-artifact@v4
      with:
        name: python-app
        path: |
          release.zip
          !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build-deploy
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: python-app

    - name: Unzip artifact for deployment
      run: unzip release.zip

    - name: 'Deploy to Azure Web App'
      uses: azure/webapps-deploy@v3
      id: deploy-to-webapp
      with:
        app-name: 'articlecmswebapp'
        slot-name: 'Production'
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_59894CC4A8624E0484CE036964C77224 }}